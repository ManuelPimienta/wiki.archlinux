=== Original ===
check()[editar]
Place for calls to make check and similar testing routines. It is highly recommended to have check() as it helps to make sure software 
has been built correctly and works fine with its dependencies. Users who do not need it (and occasionally maintainers who can not fix 
a package for this to pass) can disable it using BUILDENV+=('!check') in PKGBUILD/makepkg.conf or call makepkg with --nocheck flag.

=== Traducción ===

Lugar para llamar a {{ic|make check}} para hacer chequeos y rutinas similares de prueba. Es muy recomendable tener check(), ya que 
ayuda a asegurar que el software se ha construido correctamente y funciona bien con sus dependencias. Usuarios que no lo necesitan 
(Y ocasionalmente los mantenedores que no pueden arreglar un paquete para que esto pase) puede inhabilitarlo usando BUILDENV+=('!check') 
en el PKGBUILD/makepkg.conf o llamar makepkg con --nocheck flag.

=== Original ===
package()[editar]

The final step is to put the compiled files in a directory where makepkg can retrieve them to create a package. This by default is the 
pkg directory—a simple fakeroot environment. The pkg directory replicates the hierarchy of the root file system of the software's 
installation paths. If you have to manually place files under the root of your filesystem, you should install them in the  pkg directory 
under the same directory structure. For example, if you want to install a file to /usr/bin, it should instead be placed under 
$pkgdir/usr/bin. Very few install procedures require the user to copy dozens of files manually. Instead, for most software, calling 
make install will do so. The final line should look like the following in order to correctly install the software in the pkg directory:

make DESTDIR="$pkgdir/" install

Note: It is sometimes the case where DESTDIR is not used in the Makefile; you may need to use prefix instead. If the package is built 
with autoconf / automake, use DESTDIR; this is what is documented in the manuals. If DESTDIR does not work, try building with make 
prefix="$pkgdir/usr/" install. If that does not work, you will have to look further into the install commands that are executed by 
"make <...> install".


=== Traducción ===
package()

El paso final es poner los archivos compilados en un directorio donde makepkg puede recuperarlos para crear un paquete. Por defecto es 
el directorio {{pkg}} - un simple entorno fakeroot. El directorio pkg replica la jerarquía del sistema de archivos raíz de las rutas de 
instalación del software. Si tiene que colocar manualmente los directorios raíz de su sistema de archivos, debe instalarlos en el 
directorio pkg bajo la misma estructura de directorios. Por ejemplo, si desea instalar un archivo en /usr/bin, debe colocarse en 
$pkgdir/usr/bin. Muy pocos procedimientos de instalación requieren que el usuario copie docenas de archivos manualmente. En su lugar, 
la mayoría de software make install lo hará. La última línea debe ser similar a la siguiente para poder instalar correctamente el 
software en el directorio pkg:

make DESTDIR="$pkgdir/" install

Nota: A veces está el caso en que DESTDIR no se utiliza en el makefile; puede que tenga que usar prefijo en su lugar. Si el paquete 
está construido con autoconf / automake, use DESTDIR; esto es lo que se documenta en los manuales. Si DESTDIR no funciona, trate de 
construir con make prefix="$pkgdir/usr/" install. Si eso no funciona, tendrá que buscar más en los comandos de instalación que son 
ejecutados por "make <...> install".


=== Original ===

In some odd cases, the software expects to be run from a single directory. In such cases, it is wise to simply copy these to 
$pkgdir/opt. More often than not, the installation process of the software will create sub-directories below the pkg directory. 
If it does not, however, makepkg will generate a lot of errors and you will need to manually create sub-directories by adding the 
appropriate mkdir -p commands in the build() function before the installation procedure is run.
In old packages, there was no package() function. So, files were put into the pkg directory at the end of the build() function. 
If package() is not present, build() runs via fakeroot. In new packages, package() is required and runs via fakeroot instead, and 
build() runs without any special privileges.
makepkg --repackage runs only the package() function, so it creates a *.pkg.* file without compiling the package. This may save 
time e.g. if you just have changed the depends variable of the package.

Note: The package() function is the only required function in a PKGBUILD. If you must only copy files into their respective 
directories to install a program, do not put it in the build() function, put that in the package() function.

Note: Creating symlinks is a slightly awkward process in the package() function. Using the naive approach 
ln -s "${pkgdir}/from/foo" "${pkgdir}/to/goo" will result in a broken symlink to the build directory. The way to create a proper 
link is to create it pointing to an initially-broken source, ln -s "/from/foo" "${pkgdir}/to/goo". Once the package is installed, 
the link will point to the right place.

=== Traducción ===

En algunos casos raros, el software espera ejecutarse desde un único directorio. En tales casos, es aconsejable simplemente 
copiarlos $pkgdir/opt. A menudo, el proceso de instalación del software creará subdirectorios debajo del directorio pkg.

Si no lo hace, makepkg generará muchos errores y necesitará crear manualmente subdirectorios añadiendo los comandos 
apropiados de mkdir -p en la función build () antes de ejecutar el procedimiento de instalación.

En los paquetes antiguos, no había ninguna función package (). Por lo tanto, los archivos se colocaban en el directorio pkg al 
final de la función build ().
Si package () no está presente, build () se ejecuta a través de fakeroot. En paquetes nuevos, package () es necesario y se 
ejecuta a través de fakeroot en su lugar, y Build () se ejecuta sin privilegios especiales.

makepkg --repackage ejecuta sólo la función package (), por lo que crea un archivo *.pkg.* archivo sin compilar el paquete.
Esto puede ahorrar tiempo, por ejemplo, si acaba de cambiar la variable dependiente del paquete.

Nota: La función package () es la única función requerida en un PKGBUILD. Si sólo debe copiar archivos en sus respectivos
directorios para instalar un programa, no lo ponga en la función build (), póngalo en la función package ().

Nota: Crear enlaces simbólicos es un proceso un poco incómodo en la función package (). Utilizando el enfoque ingenuo 
Ln -s "$ {pkgdir} / from / foo" "$ {pkgdir} / to / goo" resultará en un enlace simbólico roto al directorio de compilación.
La manera correcta de crear una link es crearlo apuntando a una fuente inicialmente rota, ln -s "/ from / foo" "$ {pkgdir} / to / goo".
Una vez instalado el paquete, el enlace apuntará al lugar correcto.







